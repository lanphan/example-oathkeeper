events {
    worker_connections 1024;
}

http {

    resolver 127.0.0.11 valid=10s;

    server {
        listen 443 ssl;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # enable cors
        add_header 'Access-Control-Allow-Origin' '127.0.0.1';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';

        # protected resources
        location ~ ^/(debug|dashboard|settings)$ {
            auth_request /auth-decision;
            auth_request_set $next_uri $upstream_http_X_Original_URI;

            proxy_pass http://kratos-selfservice-ui-node:4435$request_uri;
            proxy_set_header Host $host;
        }

        location = / {
            auth_request /auth-decision;
            auth_request_set $next_uri $upstream_http_X_Original_URI;

            proxy_pass http://kratos-selfservice-ui-node:4435$request_uri;
            proxy_set_header Host $host;
        }

        location /auth-decision {
            internal;
            proxy_pass http://oathkeeper:4456/decisions$request_uri;
            proxy_pass_request_body   off;
            proxy_set_header          Content-Length   "";
            proxy_set_header          Host             $http_host;
            proxy_set_header          X-Original-URI   $request_uri;

            # proxy_intercept_errors    on;
        }

        location ~ ^/\.ory/kratos/public(/?)(.*) {
            proxy_pass http://kratos:4433/$2;
            proxy_set_header Host $host;
        }

        location / {
            proxy_pass http://kratos-selfservice-ui-node:4435$request_uri;
            proxy_set_header Host $host;
        }

        error_page 401 = @error401;

        # Catch if 401/unauthorized and redirect for login
        location @error401 {
            return 302 https://127.0.0.1/auth/login?next=https://$http_host$next_uri;
        }
    }
}